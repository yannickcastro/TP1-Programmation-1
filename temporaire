
# Avec les fonctions je génère une liste de cartes séparer en 4 rangée , je trouve 
# les troues et en même temps les cartes_vertes je rajoute les 2 lorsque le troues 
# est au début. Je genère aussi une liste organisé par couleur pour détecter la 
# victoire. Si la liste du jeu est identique a la liste organiser victoire. J'ai 
# d'autre fonction  qui vont peux-être être utile. J'ai un genre de junkyard.
# Maintenant c'est un peu éparpillé je voulais voir comment tu voulais qu'on procède
# avec le code python et html. j'ai aussi une fonction qui bouge les cartes encore un
# peu de travail la dessus. Tu me donneras des news. Bonne soirée

deck_neuf = list(range(52))
def deck():
    deck = []
    while len(deck) < 52:    
        card = math.floor(random() * 52)
        if card in deck:
            continue        
        else:
            deck.append(card)
    return deck

def deck_divise(deck):
    one = []
    two = []
    three = []
    four = []
    while len(deck) > 0:
        one.append(deck.pop())
        two.append(deck.pop())
        three.append(deck.pop())
        four.append(deck.pop())
    return [one, two, three, four]

def simplifie(liste):
    liste_simple = []
    for i in range(len(liste)):
        for j in range(len(liste[i])):
            liste_simple.append(liste[i][j])
            
    return liste_simple

def victoire(liste, form_temp):
    if len(liste) == 0:
        print("victoire")        
    elif liste[0] == form_temp[0]:
        liste.remove(form_temp[0])
        form_temp.remove(form_temp[0])
        victoire(liste, form_temp)        
    else:
        pass
    return liste

def formule(deck):
    one = []
    two = []
    three = []
    four = []
    
    while len(deck) > 0:
        one.append(deck.pop(0))
        two.append(deck.pop(0))
        three.append(deck.pop(0))
        four.append(deck.pop(0)) 
        
    one.pop(0)
    two.pop(0)
    three.pop(0)
    four.pop(0)
    return [one, two, three, four]

def trouve(liste, carte):    
    for i in range(len(liste)):
        for j in range(len(liste[i])):
            if carte == liste[i][j]:
                index = [i, j]
                break
            else:
                continue
    return index

def find_two(liste):
    index = []
    for i in range(4, 8):
        index.append(trouve(liste, i))
    return index

def find_as(liste):
    index = []
    for i in range(4):
        index.append(trouve(liste, i))
    return index

def index_prec(index):
    index_prec = []
    for i in range(len(index)):
        index_temp = index[i]
        if index_temp[1] == 0:
            pass
        else:
            index_temp[1]  -= 1
            index_prec.append(index_temp)
        
    return index_prec
        

deck_neuf = list(range(52))
liste = deck_divise(deck())
index = index_prec(find_as(liste))    


def carte_verte(liste, index):
    carte = []
    if len(index) < 4:
        carte.append(4)
        carte.append(5)
        carte.append(6)
        carte.append(7)
    for i in range(len(index)):
        i_temp = index[i]
        carte.append(liste[i_temp[0]][i_temp[1]]+4)
    
    return carte


liste = deck_divise(deck())
index = index_prec(find_as(liste))   
print(liste)
print(index)        
print(carte_verte(liste, index))        
        
        
        
