# Crée une liste de 0 à 51
deck_neuf = list(range(52))

# La fonction deck ne prend pas d'argument.La fonction retourne une liste des
# nombres 0 à 51 dans un ordre aléatoire.
def deck():
    deck = []
    while len(deck) < 52:    
        card = math.floor(random() * 52)
        if card in deck:
            continue        
        else:
            deck.append(card)
    return deck

# La fonction deck_divise prend une liste en argument.La fonction retourne une 
# liste en quatre index où la liste de départ a été inclu un par index jusqu'à
# se que la liste soit vide.
def deck_divise(deck):
    one = []
    two = []
    three = []
    four = []
    while len(deck) > 0:
        one.append(deck.pop())
        two.append(deck.pop())
        three.append(deck.pop())
        four.append(deck.pop())
    return [one, two, three, four]

# La fonction trouve prend une liste et une catre en argument. La fonction 
# retourne les index de la carte sous la forme [i, j].
def trouve(liste, carte):
    index = []
    for i in range(len(liste)):
        for j in range(len(liste[i])):
            if carte == liste[i][j]:
                index = [i, j]
                break        
    return index

# La fonction trouve_index prend unn liste et des cartes en arguments. La 
# fonction fais un appel à trouve(liste, carte) puis avec append() retourne
# une liste qui contient les index.
def trouve_index(liste, cartes):
    index = []
    for i in range(len(liste)):
        index.append(trouve(liste, cartes[i]))
    return index

# La fonction précédante prend un index en argument et retourne l'index qui le 
# précède  si celui si n'est pas nul. Entré = [i, j], sorti = [i, j-1]
def precedante(index):
    les_prec = []
    for i in range(len(index)):
        temp = index[i]
        if temp[1] >= 1 and temp[1] <=12:
            les_prec.append([temp[0], temp[1]-1])
        else:
            pass
    return les_prec

# La fonction les_zeros prend la position des as en arguments. La fonction 
# garde la position des as qui n'ont pas d'autre as comme voisins et si il y a
# deux as un à la suite de l'autre la fonction garde celui avec le plus petit
# index. La fonction retourne une liste des index gardés.
def les_zeros(les_as):
    double = []
    n = 0
    for i in range(len(les_as)):
        temp_i = les_as[i]
        for j in range(len(les_as)):
            temp_j = les_as[j]
            if temp_i[0] == temp_j[0] and temp_i[1] == temp_j[1] - 1:
                double.append(temp_j)
            else:
                pass
            
    for i in range(len(double)):
        les_as.remove(double[i])
        
    return les_as 

# La fonction prend une liste et des index en argument. La fonction retourne
# une liste des cartes se situant à ces index.
def cartes(liste, index):
    cartes = []
    for i in range(len(index)):
        temp = index[i]
        cartes.append(liste[temp[0]][temp[1]])
    return cartes
 
# La fonction suivante prend des cartes et la position des as. La fonction
# retourne les carte qui suivent ceux donné en arguments et ajoute les deux si
# les as se trouve au début de la liste.
def suivante(cartes, les_as):
    cartes_sui = []
    for i in range(len(les_as)):
        if les_as[i][1] == 0:
            cartes_sui.append(4)
            cartes_sui.append(5)
            cartes_sui.append(6)
            cartes_sui.append(7)
            break
        else:
            pass
    for i in range(len(cartes)):
        if cartes[i] >= 4 and cartes[i] <= 47: 
            cartes_sui.append(cartes[i] + 4)
        else:
            pass
        
            
    return cartes_sui

# La fonction destination prend un liste et un choix en argument. La fonction
# retourne les coordonnées de l'as qui corespond au point ou le choix vas 
# retrouver la carte précédente.
def destination(liste, choix):
    prec = choix -4
    coord_prec = trouve(liste, prec)
    coord = [coord_prec[0], coord_prec[1]+1]
    return coord

# La fonction prend une liste, un point de départ et d'arrivé en arguments.
# La fonction effectue l'échange des deux cartes et retourne les nouvelle 
# liste.
def bouger(liste, depart, arriver):
    temp_dep = liste[depart[0]][depart[1]]
    temp_arr = liste[arriver[0]][arriver[1]]
    liste[depart[0]].remove(temp_dep)
    liste[depart[0]].insert(depart[1], temp_arr)
    liste[arriver[0]].remove(temp_arr)
    liste[arriver[0]].insert(arriver[1], temp_dep)
    return liste

def init():
    liste = deck_divise(deck())
    print(liste)
    les_as = trouve_index(liste, [0, 1, 2, 3])
    les_as = les_zeros(les_as)
    les_prec = precedante(les_as) 
    cartes_prec = cartes(liste, les_prec)
    cartes_sui = suivante(cartes_prec, les_as)
    print(cartes_sui)
    le_choix = cartes_sui[math.floor(random() * len(cartes_sui))]
    print(le_choix)
    depart = trouve(liste, le_choix)
    print(depart)
    arriver = destination(liste, le_choix)
    print(arriver)
    print(bouger(liste, depart, arriver))
init()
