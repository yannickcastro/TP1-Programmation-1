#Yannick Castro - 10 décemebre 2023
# Alexandre Laberge

from random import randint

# La fonction deck_divise prend une liste en argument.La fonction retourne une 
# liste en quatre index où la liste de départ a été inclu un par index jusqu'à
# se que la liste soit vide.
def deck_divise(deck):
    one = []
    two = []
    three = []
    four = []
    while len(deck) > 0:
        one.append(deck.pop())
        two.append(deck.pop())
        three.append(deck.pop())
        four.append(deck.pop())
    return [one, two, three, four]

def test_deck_divise():
    assert deck_divise([]) == [[], [], [], []]
    assert deck_divise([1, 2, 3, 4]) == [[4], [3], [2], [1]]
    assert deck_divise([1, 2, 3, 4, 5]) == [[], [], [], []]
    assert deck_divise([1, 2, 3, 4, 5, 6, 7, 8]) == \
    [[8, 4], [7, 3], [6, 2], [5, 1]]
    

test_deck_divise()

# La fonction trouve prend une liste et une catre en argument. La fonction 
# retourne les index de la carte sous la forme [i, j].
def trouve(liste, carte):
    index = []
    for i in range(len(liste)):
        for j in range(len(liste[i])):
            if carte == liste[i][j]:
                index = [i, j]
                break        
    return index

def test_trouve():
    assert trouve([[1], [2], [3], [4]], 5) == []
    assert trouve([[1], [2], [3], [4]], 1) == [0, 0]
    assert trouve([[1], [2], [3], [4]], 2) == [1, 0]
    assert trouve([[1], [2], [3], [4]], 3) == [2, 0]
    assert trouve([[1], [2], [3], [4]], 4) == [3, 0]
    assert trouve([[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]], 7) == [2, 1]
    

test_trouve()

# La fonction trouve_index prend unn liste et des cartes en arguments. La 
# fonction fais un appel à trouve(liste, carte) puis avec append() retourne
# une liste qui contient les index.
def trouve_index(liste, cartes):
    index = []
    for i in range(len(liste)):
        index.append(trouve(liste, cartes[i]))
    return index

def test_trouve_index():    
    assert trouve_index([[1, 5], [2, 6], [3, 7], [4, 8]], [1, 2]) ==\
    [[0, 0], [1, 0]]
    assert trouve_index([[1, 5], [2, 6], [3, 7], [4, 8]], [3, 4]) ==\
    [[2, 0], [3, 0]]
    assert trouve_index([[1, 5], [2, 6], [3, 7], [4, 8]], [5, 6]) ==\
    [[0, 1], [1, 1]]
    assert trouve_index([[1, 5], [2, 6], [3, 7], [4, 8]], [7, 8]) ==\
    [[2, 1], [3, 1]]
    
    
test_trouve_index()

# La fonction précédante prend un index en argument et retourne l'index qui le 
# précède  si celui si n'est pas nul. Entré = [i, j], sorti = [i, j-1]
def precedante(index):
    les_prec = []
    for i in range(len(index)):
        temp = index[i]
        if temp[1] >= 1 and temp[1] <=12:
            les_prec.append([temp[0], temp[1]-1])
        else:
            pass
    return les_prec

def test_precedante():
    assert precedante([[0, 0], [1, 0]]) == []
    assert precedante([[0, 0], [1, 1]]) == [[1, 0]]
    assert precedante([[1, 1], [2, 2], [3, 3]]) == [[1, 0], [2, 1], [3, 2]]

test_precedante()

# La fonction les_zeros prend la position des as en arguments. La fonction 
# garde la position des as qui n'ont pas d'autre as comme voisins et si il y a
# deux as un à la suite de l'autre la fonction garde celui avec le plus petit
# index. La fonction retourne une liste des index gardés.
def les_zeros(les_as):
    double = []
    n = 0
    for i in range(len(les_as)):
        temp_i = les_as[i]
        for j in range(len(les_as)):
            temp_j = les_as[j]
            if temp_i[0] == temp_j[0] and temp_i[1] == temp_j[1] - 1:
                double.append(temp_j)
            else:
                pass
            
    for i in range(len(double)):
        les_as.remove(double[i])
        
    return les_as 

def test_les_zeros():
    assert les_zeros([[0, 0], [0, 1], [2, 4], [3, 1]]) ==\
    [[0, 0], [2, 4], [3, 1]]
    assert les_zeros([[0, 0], [1, 1], [2, 4], [3, 1]]) ==\
    [[0, 0], [1, 1], [2, 4], [3, 1]]
    assert les_zeros([[0, 0], [0, 1], [0, 2], [0, 3]]) ==\
    [[0, 0]]

test_les_zeros()

# La fonction prend une liste et des index en argument. La fonction retourne
# une liste des cartes se situant à ces index.
def cartes(liste, index):
    cartes = []
    for i in range(len(index)):
        temp = index[i]
        cartes.append(liste[temp[0]][temp[1]])
    return cartes

def test_cartes():
    assert cartes([[18, 9, 29, 38], [20, 50, 31, 48],\
                   [1, 14, 43, 42], [12, 18, 21, 41]], [[0, 0]]) == [18]
    assert cartes([[18, 9, 29, 38], [20, 50, 31, 48],\
                   [1, 14, 43, 42], [12, 18, 21, 41]], [[1, 1]]) == [50]
    assert cartes([[18, 9, 29, 38], [20, 50, 31, 48],\
                   [1, 14, 43, 42], [12, 18, 21, 41]],\
                  [[1, 1], [3, 3]]) == [50, 41]
    assert cartes([[18, 9, 29, 38], [20, 50, 31, 48],\
                   [1, 14, 43, 42], [12, 18, 21, 41]],\
                  [[1, 1], [3, 3], [2, 0]]) == [50, 41, 1]
    
test_cartes()
 
# La fonction suivante prend des cartes et la position des as. La fonction
# retourne les carte qui suivent ceux donné en arguments et ajoute les deux si
# les as se trouve au début de la liste.
def suivante(cartes, les_as):
    cartes_sui = []
    for i in range(len(les_as)):
        if les_as[i][1] == 0:
            cartes_sui.append(4)
            cartes_sui.append(5)
            cartes_sui.append(6)
            cartes_sui.append(7)
            break
        else:
            pass
    for i in range(len(cartes)):
        if cartes[i] >= 4 and cartes[i] <= 47: 
            cartes_sui.append(cartes[i] + 4)
        else:
            pass
    return cartes_sui

def test_suivante():
    assert suivante([44, 45, 22], [[2, 5], [2, 0], [1, 2], [1, 9]])\
    == [4, 5, 6, 7, 48, 49, 26]
    assert suivante([22, 17, 34], [[2, 5], [2, 0], [1, 2], [1, 9]])\
    == [4, 5, 6, 7, 26, 21, 38]
    assert suivante([7, 11, 15], [[2, 5], [2, 0], [1, 2], [1, 9]])\
    == [4, 5, 6, 7, 11, 15, 19]
    
test_suivante()  
  
  

# La fonction destination prend un liste et un choix en argument. La fonction
# retourne les coordonnées de l'as qui corespond au point ou le choix vas 
# retrouver la carte précédente.
def destination(liste, choix):
    if choix >= 4 and choix <= 7:
        coord_temp = []
        
        les_as = trouve_index(liste, [0, 1, 2, 3])
        for i in range(len(les_as)):
            if les_as[i][1] == 0:
                coord_temp.append(les_as[i])
                
            else:
                pass
        coord = coord_temp[math.floor(random() * len(coord_temp))] 
        return coord
    else:
        
        prec = choix -4
        coord_prec = trouve(liste, prec)
        coord = [coord_prec[0], coord_prec[1]+1]
        return coord

def test_destination():
    assert destination([[2, 47, 31, 13, 33, 21, 12, 32, 22, 49, 50, 14, 26],\
                        [37, 8, 25, 10, 24, 16, 20, 18, 51, 27, 23, 34, 28], \
                        [17, 6, 9, 35, 3, 43, 40, 36, 46, 4, 19, 15, 39], \
                        [44, 48, 1, 41, 29, 5, 30, 42, 11, 45, 7, 0, 38]], 5)\
    == [0, 0]
    assert destination([[27, 47, 31, 13, 33, 21, 12, 32, 22, 49, 50, 14, 26],\
                        [37, 8, 25, 10, 24, 16, 20, 18, 51, 2, 23, 34, 28], \
                        [17, 6, 9, 35, 3, 43, 40, 36, 46, 4, 19, 15, 39], \
                        [1, 48, 44, 41, 29, 5, 30, 42, 11, 45, 7, 0, 38]], 5)\
    == [3, 0]
    assert destination([[27, 47, 31, 13, 33, 21, 12, 32, 22, 49, 50, 14, 26],\
                        [37, 8, 25, 10, 24, 16, 20, 18, 51, 2, 23, 34, 28], \
                        [17, 6, 9, 35, 3, 43, 40, 36, 46, 4, 19, 15, 39], \
                        [1, 48, 44, 41, 29, 5, 30, 42, 11, 45, 7, 0, 38]], 11)\
    == [3, 11]
    
    assert destination([[27, 47, 31, 13, 33, 21, 12, 32, 22, 49, 50, 14, 26],\
                        [37, 8, 25, 10, 24, 16, 20, 18, 51, 2, 23, 34, 28], \
                        [17, 6, 9, 35, 3, 43, 40, 36, 46, 4, 19, 15, 39], \
                        [1, 48, 44, 41, 29, 5, 30, 42, 11, 45, 7, 0, 38]], 39)\
    == [2, 4] 
        

test_destination()

# La fonction prend une liste, un point de départ et d'arrivé en arguments.
# La fonction effectue l'échange des deux cartes et retourne les nouvelle 
# liste.
def bouger(liste, depart, arriver):
    temp_dep = liste[depart[0]][depart[1]]
    temp_arr = liste[arriver[0]][arriver[1]]
    liste[depart[0]].remove(temp_dep)
    liste[depart[0]].insert(depart[1], temp_arr)
    liste[arriver[0]].remove(temp_arr)
    liste[arriver[0]].insert(arriver[1], temp_dep)
    return liste

def test_bouger():
    assert bouger([[49, 5, 14, 36, 21, 7, 29, 27, 22, 15, 35, 44, 30], \
              [42, 24, 47, 41, 20, 43, 28, 16, 26, 3, 45, 34, 25],\
              [46, 10, 18, 4, 50, 23, 12, 39, 0, 32, 37, 6, 2], \
              [51, 9, 13, 33, 1, 17, 40, 48, 31, 11, 8, 38, 19]],\
             [1, 5], [2, 8]) == \
    [[49, 5, 14, 36, 21, 7, 29, 27, 22, 15, 35, 44, 30],\
     [42, 24, 47, 41, 20, 0, 28, 16, 26, 3, 45, 34, 25],\
     [46, 10, 18, 4, 50, 23, 12, 39, 43, 32, 37, 6, 2],\
     [51, 9, 13, 33, 1, 17, 40, 48, 31, 11, 8, 38, 19]]
    assert bouger([[49, 5, 14, 36, 21, 7, 29, 27, 22, 15, 35, 44, 30], \
              [42, 24, 47, 41, 20, 43, 28, 16, 26, 3, 45, 34, 25],\
              [46, 10, 18, 4, 50, 23, 12, 39, 0, 32, 37, 6, 2], \
              [51, 9, 13, 33, 1, 17, 40, 48, 31, 11, 8, 38, 19]],\
             [0, 12], [1, 9]) == \
    [[49, 5, 14, 36, 21, 7, 29, 27, 22, 15, 35, 44, 3],\
     [42, 24, 47, 41, 20, 43, 28, 16, 26, 30, 45, 34, 25],\
     [46, 10, 18, 4, 50, 23, 12, 39, 0, 32, 37, 6, 2],\
     [51, 9, 13, 33, 1, 17, 40, 48, 31, 11, 8, 38, 19]]
    assert bouger([[49, 5, 14, 36, 21, 7, 29, 27, 22, 15, 35, 44, 30], \
              [42, 24, 47, 41, 20, 43, 28, 16, 26, 3, 45, 34, 25],\
              [46, 10, 18, 4, 50, 23, 12, 39, 0, 32, 37, 6, 2], \
              [51, 9, 13, 33, 1, 17, 40, 48, 31, 11, 8, 38, 19]],\
             [2, 10], [3, 4]) == \
    [[49, 5, 14, 36, 21, 7, 29, 27, 22, 15, 35, 44, 30], \
     [42, 24, 47, 41, 20, 43, 28, 16, 26, 3, 45, 34, 25], \
     [46, 10, 18, 4, 50, 23, 12, 39, 0, 32, 1, 6, 2], \
     [51, 9, 13, 33, 37, 17, 40, 48, 31, 11, 8, 38, 19]]
    assert bouger([[49, 5, 14, 36, 21, 7, 29, 27, 22, 15, 35, 44, 30], \
              [42, 24, 47, 41, 20, 43, 28, 16, 26, 3, 45, 34, 25],\
              [46, 10, 18, 4, 50, 23, 12, 39, 0, 32, 37, 6, 2], \
              [51, 9, 13, 33, 1, 17, 40, 48, 31, 11, 8, 38, 19]],\
             [2, 1], [2, 12]) == \
    [[49, 5, 14, 36, 21, 7, 29, 27, 22, 15, 35, 44, 30], \
     [42, 24, 47, 41, 20, 43, 28, 16, 26, 3, 45, 34, 25],\
     [46, 18, 4, 50, 23, 12, 39, 0, 32, 37, 6, 2, 10], \
     [51, 9, 13, 33, 1, 17, 40, 48, 31, 11, 8, 38, 19]]

test_bouger()

#Affichage HTML
def generer_nom_carte():
  cartes =[]
  for i in range(13):
    cartes_tmp = ['A','2','3','4','5','6','7','8','9','10','J','Q','K']
    cartes.append(cartes_tmp[i] + "C.svg")
    cartes.append(cartes_tmp[i] + "D.svg")
    cartes.append(cartes_tmp[i] + "H.svg")
    cartes.append(cartes_tmp[i] + "S.svg")
  return cartes

def melanger_liste():
  liste_cartes = list(range(0,52))
  n = len(liste_cartes)
  for i in range(n - 1, 0, -1):
    j = randint(0, i)
    liste_cartes[i], liste_cartes[j] = liste_cartes[j], liste_cartes[i]
  return liste_cartes

nb_brassage = 3

def mise_a_jour(case,indice):
  # changer la couleur de fond de la case 0
  case0 = document.querySelector("#"+case)
  case0.removeAttribute("style")
  les_as = trouve_index(liste_cartes, [0, 1, 2, 3])
  les_as = les_zeros(les_as)
  les_prec = precedante(les_as)
  cartes_prec = cartes(liste_cartes, les_prec)
  cartes_sui = suivante(cartes_prec, les_as)
  repartition_cartes = generer_nom_carte()
  indice_carte = repartition_cartes.index(indice)
  indice_choix = cartes_sui.index(indice_carte)
  le_choix = cartes_sui[indice_choix]
  depart = trouve(liste_cartes, le_choix)
  arriver = destination(liste_cartes, le_choix)
  print(depart)
  print(arriver)
  nouv_list = bouger(liste_cartes, depart, arriver)
  print(nouv_list)
  changement(nouv_list)

def changement(index_cartes):
  global liste_cartes, nb_brassage
  liste_cartes  = index_cartes
  racine = document.querySelector("#cb-body")
  racine.innerHTML = ""
  def generer_grille(rows, cols):
    grille_html = """
    <style>
      #jeu table { float:none; }  
      #jeu table td { border:0; padding:1px 2px; height:auto; width:auto; }
      #jeu table td img { height:140px; }
      
      .bouton {
        font-size: 15px;
        border-radius: 5px;
        padding: -2px;
        border: 1px solid #999;
      }
      
      #nombre-clicks {
      margin-left: 10px;
      }
    </style>
    <div id='jeu'>
      <table>
    """
    nom_carte = generer_nom_carte()
    for i in range(rows):
      grille_html += "<tr>"
      for j in range(cols):
        if liste_cartes[i][j] <= 3:
          case_id = "case" + str(i * cols + j)
          grille_html += "<td id='" + case_id + "' onclick='mise_a_jour(\"" + case_id + "\", \"" + nom_carte[liste_cartes[i][j]] + "\")'><img src='cards/absent.svg'></td>"
          #print(liste_cartes[i][j])
        else:
          case_id = "case" + str(i * cols + j)
          grille_html += "<td id='" + case_id + "' onclick='mise_a_jour(\"" + case_id + "\", \"" + nom_carte[liste_cartes[i][j]] + "\")'><img src='cards/" + nom_carte[liste_cartes[i][j]] + "'></td>"
          #print(liste_cartes[i][j])
      grille_html += "</tr>"
    grille_html += "</table>"
    return grille_html
  
  racine = document.querySelector("#cb-body")
  racine.innerHTML = generer_grille(4,13) +  """
    <br>
    <div class="bouton-container">
      <p id ="nombre-clicks">Vous pouvez encore
      <button class ="bouton" onclick="brasser_cartes()" >Brasser les cartes</button> """ + str(nb_brassage) + """ fois
    </div>
    <div class="bouton-container">
      <button id ="nombre-clicks" class ="bouton" onclick=init()>Nouvelle partie</button>   
    </div>
    """
  les_as = trouve_index(liste_cartes, [0, 1, 2, 3])
  les_as = les_zeros(les_as)
  les_prec = precedante(les_as)
  cartes_prec = cartes(liste_cartes, les_prec)
  cartes_sui = suivante(cartes_prec, les_as)
  print(cartes_sui)
  
  for l in range(len(cartes_sui)):
    indice = trouve(liste_cartes,cartes_sui[l])
    indice = (indice[0])*13 + indice[1]
    # changer la couleur de fond de la case 0
    case_id = "#case"+str(indice)
    case0 = document.querySelector(case_id)
    case0.setAttribute("style", "background-color: lime")  
      

def init(): 
  cartes = deck_divise(melanger_liste())
  changement(cartes)
  
def brasser_cartes():
  global nb_brassage
  nb_brassage = nb_brassage - 1
  if nb_brassage == 0:
    racine = document.querySelector("#cb-body")
    racine.innerHTML = generer_grille(4,13) +  """
    <br>
    <div class="bouton-container">
      <p id ="nombre-clicks">Vous pouvez encore
      <button class ="bouton" onclick="brasser_cartes()" >Brasser les cartes</button> """ + str(nb_brassage) + """ fois
    </div>
    <div class="bouton-container">
      <button id ="nombre-clicks" class ="bouton" onclick=init()>Nouvelle partie</button>   
    </div>
    """
    
    
