
deck_neuf = list(range(52))

def deck():
    deck = []
    while len(deck) < 52:    
        card = math.floor(random() * 52)
        if card in deck:
            continue        
        else:
            deck.append(card)
    return deck

def deck_divise(deck):
    one = []
    two = []
    three = []
    four = []
    while len(deck) > 0:
        one.append(deck.pop())
        two.append(deck.pop())
        three.append(deck.pop())
        four.append(deck.pop())
    return [one, two, three, four]

def trouve(liste, carte):
    index = []
    for i in range(len(liste)):
        for j in range(len(liste[i])):
            if carte == liste[i][j]:
                index = [i, j]
                break        
    return index

def trouve_index(liste, cartes):
    index = []
    for i in range(len(liste)):
        index.append(trouve(liste, cartes[i]))
    return index

def precedante(index):
    les_prec = []
    for i in range(len(index)):
        temp = index[i]
        if temp[1] >= 1 and temp[1] <=12:
            les_prec.append([temp[0], temp[1]-1])
        else:
            pass
    return les_prec

def les_zeros(les_as):
    double = []
    n = 0
    for i in range(len(les_as)):
        temp_i = les_as[i]
        for j in range(len(les_as)):
            temp_j = les_as[j]
            if temp_i[0] == temp_j[0] and temp_i[1] == temp_j[1] - 1:
                double.append(temp_j)
            else:
                pass
            
    for i in range(len(double)):
        les_as.remove(double[i])
        
    return les_as 

def cartes(liste, index):
    cartes = []
    for i in range(len(index)):
        temp = index[i]
        cartes.append(liste[temp[0]][temp[1]])
    return cartes
           
def suivante(cartes, les_as):
    cartes_sui = []
    for i in range(len(les_as)):
        if les_as[i][1] == 0:
            cartes_sui.append(4)
            cartes_sui.append(5)
            cartes_sui.append(6)
            cartes_sui.append(7)
            break
        else:
            pass
    for i in range(len(cartes)):
        if cartes[i] >= 4 and cartes[i] <= 47: 
            cartes_sui.append(cartes[i] + 4)
        else:
            pass
        
            
    return cartes_sui
        
def destination(liste, choix):
    prec = choix -4
    coord_prec = trouve(liste, prec)
    coord = [coord_prec[0], coord_prec[1]+1]
    return coord

def bouger(liste, depart, arriver):
    temp_dep = liste[depart[0]][depart[1]]
    temp_arr = liste[arriver[0]][arriver[1]]
    liste[depart[0]].remove(temp_dep)
    liste[depart[0]].insert(depart[1], temp_arr)
    liste[arriver[0]].remove(temp_arr)
    liste[arriver[0]].insert(arriver[1], temp_dep)
    return liste

def init():
    liste = deck_divise(deck())
    print(liste)
    les_as = trouve_index(liste, [0, 1, 2, 3])
    les_as = les_zeros(les_as)
    les_prec = precedante(les_as) 
    cartes_prec = cartes(liste, les_prec)
    cartes_sui = suivante(cartes_prec, les_as)
    print(cartes_sui)
    le_choix = cartes_sui[math.floor(random() * len(cartes_sui))]
    print(le_choix)
    depart = trouve(liste, le_choix)
    print(depart)
    arriver = destination(liste, le_choix)
    print(arriver)
    print(bouger(liste, depart, arriver))
init()
